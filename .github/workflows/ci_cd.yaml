name: CI/CD Churn Prediction

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-south-1
      ECR_REPOSITORY: churn_prediction
      IMAGE_TAG: latest
      EC2_USER: ubuntu
      EC2_HOST: ${{ secrets.EC2_HOST }}
      AWS_ACCOUNT_ID: 479650865906

    steps:
      # -------------------------
      # Checkout code
      # -------------------------
      - name: Checkout repository
        uses: actions/checkout@v3

      # -------------------------
      # Configure AWS credentials
      # -------------------------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # -------------------------
      # Login to Amazon ECR
      # -------------------------
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      # -------------------------
      # Build, Tag, Push Docker Image
      # -------------------------
      - name: Build, Tag and Push Image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      # -------------------------
      # Deploy to EC2
      # -------------------------
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script_stop: true
          debug: true
          script: |
            echo "=== âœ… Connected to EC2 ==="

            echo "Stopping existing containers..."
            docker ps -q --filter "ancestor=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}" | xargs -r docker stop || true

            echo "Pulling latest image..."
            docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

            echo "Removing old containers..."
            docker container prune -f || true

            echo "Starting new container..."
            docker run -d \
              --name churn_app \
              -p 8080:8080 -p 5000:5000 \
              ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
              bash -c "mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri /app/mlruns --default-artifact-root /app/mlruns & python /app/src/app.py"

            echo "Deployment complete!"
            docker ps
